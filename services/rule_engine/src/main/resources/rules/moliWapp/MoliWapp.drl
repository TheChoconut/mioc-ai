package rules.moliWapp;

import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.ruleEngine.model.Initialize;
import com.mindsmiths.ruleEngine.util.Log;
import com.mindsmiths.infobipAdapter.models.InfobipReceivedMessage;
import com.mindsmiths.armory.event.UserConnected;
import com.mindsmiths.armory.event.UserDisconnected;
import com.mindsmiths.armory.event.Submit;
import com.mindsmiths.gpt3.completion.GPT3Completion;
import com.mindsmiths.sdk.utils.Utils;
import signals.AddReview;
import agents.MoliWapp;
import com.mindsmiths.infobipAdapter.api.MessageType;

rule "Send initial message"
    when
        signal: Initialize() from entry-point "signals"
        agent: MoliWapp()
    then
        Log.info("MoliWapp has been initialized.");
        agent.sendGlobalMenu();
        // TODO: You can check if this agent is for
        // an existing email user by checking the age or gender.
        // These right now are not populated.
end

rule "Remind user to fill in the NPS survey"
    when
        signal: Heartbeat(ts: timestamp) from entry-point "signals"
        agent: MoliWapp(reminderSent == false,
                    age == null,
                    lastNpsSent before[72h] ts)
    then
        modify(agent) { setReminderSent(true) }
        agent.sendWhatsappTextMessage(agent.getReminderMessage());
        delete(signal);
end

rule "Send a new NPS message after 3 months"
    when
        signal: Heartbeat(ts: timestamp) from entry-point "signals"
        agent: MoliWapp(lastNpsSent before[90d] ts)
    then
        agent.sendNpsMessage();
        modify(agent) {
            setLastNpsSent(Utils.now()),
            setReminderSent(false),
            setFeedback(""),
            setRating(-1)
        }
end

rule "Send link to armory NPS screens after clicking on onboarding button in WhatsApp"
    when
        signal: InfobipReceivedMessage(message.type == MessageType.INTERACTIVE_BUTTON_REPLY, 
            message.id == "GET_ARMORY_LINK") from entry-point "signals"
        agent: MoliWapp()
    then
        agent.sendNpsMessage();
        delete(signal);
end

rule "Handle a user text message from WhatsApp"
    when
        signal: InfobipReceivedMessage(message.type == MessageType.TEXT,
            payload: message) from entry-point "signals"
        agent: MoliWapp()
    then
        agent.handleWhatsappTextMessage(payload);
        delete(signal);
end

rule "Send conversation response"
    when
        gpt3Result: GPT3Completion() from entry-point "signals"
        agent: MoliWapp()
    then
        modify(agent) {addMessageToMemory("Moli", gpt3Result.getBestResponse())};
        agent.sendWhatsappTextMessage(gpt3Result.getBestResponse());
        delete(gpt3Result);
end
