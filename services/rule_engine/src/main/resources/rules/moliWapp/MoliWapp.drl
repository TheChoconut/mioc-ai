package rules.moliWapp;

import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.ruleEngine.model.Initialize;
import com.mindsmiths.ruleEngine.util.Log;
import com.mindsmiths.infobipAdapter.models.InfobipReceivedMessage;
import com.mindsmiths.armory.event.UserConnected;
import com.mindsmiths.armory.event.UserDisconnected;
import com.mindsmiths.armory.event.Submit;
import com.mindsmiths.gpt3.completion.GPT3Completion;
import com.mindsmiths.sdk.utils.Utils;
import signals.AddReview;
import agents.MoliWapp;
import com.mindsmiths.infobipAdapter.api.MessageType;

rule "Send initial message"
    when
        signal: Initialize() from entry-point "signals"
        agent: MoliWapp()
    then
        Log.info("MoliWapp has been initialized.");
        agent.sendGlobalMenu();
        // TODO: You can check if this agent is for
        // an existing email user by checking the age or gender.
        // These right now are not populated.
end

rule "Remind user to fill in the NPS survey"
    when
        signal: Heartbeat(ts: timestamp) from entry-point "signals"
        agent: MoliWapp(reminderSent == false,
                    age == null,
                    lastNpsSent before[72h] ts)
    then
        modify(agent) { setReminderSent(true) }
        agent.sendWhatsappTextMessage(agent.getReminderMessage());
        delete(signal);
end

rule "Send a new NPS message after 3 months"
    when
        signal: Heartbeat(ts: timestamp) from entry-point "signals"
        agent: MoliWapp(lastNpsSent before[90d] ts)
    then
        agent.sendNpsMessage();
        modify(agent) {
            setLastNpsSent(Utils.now()),
            setReminderSent(false),
            setFeedback(""),
            setRating(-1)
        }
end

rule "Send link to armory NPS screens after clicking on onboarding button in WhatsApp"
    when
        signal: InfobipReceivedMessage(message.type == MessageType.INTERACTIVE_BUTTON_REPLY, 
            message.id == "GET_ARMORY_LINK") from entry-point "signals"
        agent: MoliWapp()
    then
        agent.sendNpsMessage();
        delete(signal);
end

rule "Handle a user text message from WhatsApp"
    when
        signal: InfobipReceivedMessage(message.type == MessageType.TEXT,
            payload: message) from entry-point "signals"
        agent: MoliWapp()
    then
        agent.handleWhatsappTextMessage(payload);
        delete(signal);
end

rule "Show NPS flow on Armory"
    when
        signal: UserConnected() from entry-point "signals"
        agent: MoliWapp(feedback == "" || feedback == null)
    then
        agent.showNPSFlow();
        delete(signal);
end

rule "User submits their name"
    when
        signal: Submit(screenId == "askForName") from entry-point "signals"
        agent: MoliWapp()
    then
        modify(agent) {
            setName(signal.getParamAsString("name"))
        };
        delete(signal);
end

// User clicked on "Miočanin" on screen "askForGender"
rule "Male gender"
    when
        signal: Submit(buttonId == "askForGenderStartedm", screenId == "askForGender") from entry-point "signals"
        agent: MoliWapp()
    then
        modify(agent) {
            setGender("M")
        };
        delete(signal);
end

// User clicked on "Miočanka" on screen "askForGender"
rule "Female gender"
    when
        signal: Submit(buttonId == "askForGenderStartedf", screenId == "askForGender") from entry-point "signals"
        agent: MoliWapp()
    then
        modify(agent) {
            setGender("F")
        };
        delete(signal);
end

// User clicked on "Prvi" on screen "askForAge"
rule "1st year"
    when
        signal: Submit(buttonId == "askForAgeStarted1", screenId == "askForAge") from entry-point "signals"
        agent: MoliWapp()
    then
        modify(agent) {
            setAge(1)
        };
        delete(signal);
end

// User clicked on "Drugi" on screen "askForAge"
rule "2nd year"
    when
        signal: Submit(buttonId == "askForAgeStarted2", screenId == "askForAge") from entry-point "signals"
        agent: MoliWapp()
    then
        modify(agent) {
            setAge(2)
        };
        delete(signal);
end

// User clicked on "Treći" on screen "askForAge"
rule "3rd year"
    when
        signal: Submit(buttonId == "askForAgeStarted3", screenId == "askForAge") from entry-point "signals"
        agent: MoliWapp()
    then
        modify(agent) {
            setAge(3)
        };
        delete(signal);
end

// User clicked on "Četvrti" on screen "askForAge"
rule "4th year"
    when
        signal: Submit(buttonId == "askForAgeStarted4", screenId == "askForAge") from entry-point "signals"
        agent: MoliWapp()
    then
        modify(agent) {
            setAge(4)
        };
        delete(signal);
end

rule "User submits their class letter"
    when
        signal: Submit(screenId == "askForClassLetter") from entry-point "signals"
        agent: MoliWapp()
    then
        String letter = ((Collection<String>)signal.getParam("classLetter")).iterator().next();
        modify(agent) {
            setClassLetter(letter)
        };
        delete(signal);
end

// User selected rating on screen "askForRating"
rule "Rating"
    when
        signal: Submit(screenId == "askForRating") from entry-point "signals"
        agent: MoliWapp()
    then
        modify(agent) {
            setRating((Integer) signal.getParam("nps"))
        };
        delete(signal)
end

// User inputted feedback on screen "askForFeedback"
rule "Feedback"
    when
        signal: Submit(textareaInput: getParamAsString("feedback"), screenId == "askForFeedback") from entry-point "signals"
        agent: MoliWapp()
    then
        String feedback = signal.getParamAsString("feedback");
        if(feedback == null)
            feedback = "";
            
        modify(agent) {
            setFeedback(feedback)
        };

        agent.send("SMITH", new AddReview(agent.getId(), agent.getGender(), agent.getAge(), agent.getRating(), agent.getFeedback(), Utils.now()));
        agent.askForThanksMessage();
        delete(signal);
end

rule "Send conversation response"
    when
        gpt3Result: GPT3Completion() from entry-point "signals"
        agent: MoliWapp()
    then
        modify(agent) {addMessageToMemory("Moli", gpt3Result.getBestResponse())};
        agent.sendWhatsappTextMessage(gpt3Result.getBestResponse());
        delete(gpt3Result);
end
